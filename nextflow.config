/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnafusion Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = "fake_input_to_build_refs.csv"
    build_references           = false
    cosmic_username            = null
    cosmic_passwd              = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Genome
    genome                     = 'GRCh38'
    genomes_base               = "${params.outdir}/references"
    ensembl_version            = 102
    read_length                = 100
    genomes                    = [:]
    starfusion_build           = true

    // Filtering
    fusioninspector_filter     = false

    // Trimming
    trim                       = false

    // Alignment options
    star_ignore_sjdbgtf                  = false
    seq_center                           = null
    seq_platform                         = null
    fusioncatcher_limitSjdbInsertNsj     = 2000000
    fusioninspector_limitSjdbInsertNsj   = 1000000

    // Enable or disable tools
    all                        = false
    arriba                     = false
    fusioncatcher              = false
    pizzly                     = false
    squid                      = false
    starindex                  = false
    starfusion                 = false
    fusionreport               = false
    fusioninspector_only       = false

    // Skip steps
    skip_qc                    = false
    skip_vis                   = false

    // Path to references
    ensembl_ref                   = "${params.genomes_base}/ensembl"
    arriba_ref                    = "/usr/local/var/lib/arriba"
    arriba_ref_blacklist          = "/usr/local/var/lib/arriba/blacklist_hg38_GRCh38_v2.3.0.tsv.gz"
    arriba_ref_protein_domain     = "/usr/local/var/lib/arriba/protein_domains_hg38_GRCh38_v2.3.0.gff3"
    // arriba paths only valid for singularity and docker containers, ok as conda not supported in rnafusion
    fusioncatcher_ref             = "${params.genomes_base}/fusioncatcher/human_v102"
    pizzly_ref                    = "${params.genomes_base}/pizzly/kallisto"
    squid_ref                     = "${params.genomes_base}/squid"
    starfusion_ref                = "${params.genomes_base}/starfusion/ctat_genome_lib_build_dir"
    starindex_ref                 = "${params.genomes_base}/star"
    fusionreport_ref              = "${params.genomes_base}/fusion_report_db"


    // Path to fusion outputs
    arriba_fusions                = null
    pizzly_fusions                = null
    squid_fusions                 = null
    starfusion_fusions            = null
    fusioncatcher_fusions         = null
    fusioninspector_fusions       = null

    // Boilerplate options
    outdir                            = null
    tracedir                          = "${params.outdir}/pipeline_info"
    publish_dir_mode                  = 'copy'
    email                             = null
    email_on_fail                     = null
    plaintext_email                   = false
    monochrome_logs                   = false
    help                              = false
    validate_params                   = true
    show_hidden_params                = false
    schema_ignore_params              = 'genomes'
    enable_conda                      = false
    singularity_pull_docker_container = false


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

includeConfig 'conf/genomes.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/rnafusion custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/rnafusion.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/rnafusion profiles: ${params.custom_config_base}/pipeline/rnafusion.config")
// }



profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        params.enable_conda    = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}


// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/rnafusion'
    author          = 'Martin Proks, Annick Renevey'
    homePage        = 'https://github.com/nf-core/rnafusion'
    description     = 'Nextflow rnafusion analysis pipeline, part of the nf-core community.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '2.2.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
